/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Error : We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Error {
    /// A broad categorization of the error. Safe for programmatic use.
    #[serde(rename = "error_type")]
    pub error_type: ErrorType,
    /// The particular error code. Safe for programmatic use.
    #[serde(rename = "error_code")]
    pub error_code: String,
    /// A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
    #[serde(rename = "error_message")]
    pub error_message: String,
    /// A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
    #[serde(rename = "display_message")]
    pub display_message: Option<String>,
    /// A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
    #[serde(rename = "request_id", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
    #[serde(rename = "causes", skip_serializing_if = "Option::is_none")]
    pub causes: Option<Vec<serde_json::Value>>,
    /// The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<f32>,
    /// The URL of a Plaid documentation page with more information about the error
    #[serde(rename = "documentation_url", skip_serializing_if = "Option::is_none")]
    pub documentation_url: Option<String>,
    /// Suggested steps for resolving the error
    #[serde(rename = "suggested_action", skip_serializing_if = "Option::is_none")]
    pub suggested_action: Option<String>,
}

impl Error {
    /// We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.
    pub fn new(error_type: ErrorType, error_code: String, error_message: String, display_message: Option<String>) -> Error {
        Error {
            error_type,
            error_code,
            error_message,
            display_message,
            request_id: None,
            causes: None,
            status: None,
            documentation_url: None,
            suggested_action: None,
        }
    }
}

/// A broad categorization of the error. Safe for programmatic use.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorType {
    #[serde(rename = "INVALID_REQUEST")]
    INVALIDREQUEST,
    #[serde(rename = "INVALID_RESULT")]
    INVALIDRESULT,
    #[serde(rename = "INVALID_INPUT")]
    INVALIDINPUT,
    #[serde(rename = "INSTITUTION_ERROR")]
    INSTITUTIONERROR,
    #[serde(rename = "RATE_LIMIT_EXCEEDED")]
    RATELIMITEXCEEDED,
    #[serde(rename = "API_ERROR")]
    APIERROR,
    #[serde(rename = "ITEM_ERROR")]
    ITEMERROR,
    #[serde(rename = "ASSET_REPORT_ERROR")]
    ASSETREPORTERROR,
    #[serde(rename = "RECAPTCHA_ERROR")]
    RECAPTCHAERROR,
    #[serde(rename = "OAUTH_ERROR")]
    OAUTHERROR,
    #[serde(rename = "PAYMENT_ERROR")]
    PAYMENTERROR,
    #[serde(rename = "BANK_TRANSFER_ERROR")]
    BANKTRANSFERERROR,
    #[serde(rename = "INCOME_VERIFICATION_ERROR")]
    INCOMEVERIFICATIONERROR,
}

impl Default for ErrorType {
    fn default() -> ErrorType {
        Self::INVALIDREQUEST
    }
}

