/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BankTransferEventListRequest : Defines the request schema for `/bank_transfer/event/list`



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BankTransferEventListRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// Plaidâ€™s unique identifier for a bank transfer.
    #[serde(rename = "bank_transfer_id", skip_serializing_if = "Option::is_none")]
    pub bank_transfer_id: Option<String>,
    /// The account ID to get events for all transactions to/from an account.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
    #[serde(rename = "bank_transfer_type", skip_serializing_if = "Option::is_none")]
    pub bank_transfer_type: Option<BankTransferType>,
    /// Filter events by event type.
    #[serde(rename = "event_types", skip_serializing_if = "Option::is_none")]
    pub event_types: Option<Vec<crate::models::BankTransferEventType>>,
    /// The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    /// The origination account ID to get events for transfers from a specific origination account.
    #[serde(rename = "origination_account_id", skip_serializing_if = "Option::is_none")]
    pub origination_account_id: Option<String>,
    /// Indicates the direction of the transfer: `outbound`: for API-initiated transfers `inbound`: for payments received by the FBO account.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
}

impl BankTransferEventListRequest {
    /// Defines the request schema for `/bank_transfer/event/list`
    pub fn new() -> BankTransferEventListRequest {
        BankTransferEventListRequest {
            client_id: None,
            secret: None,
            start_date: None,
            end_date: None,
            bank_transfer_id: None,
            account_id: None,
            bank_transfer_type: None,
            event_types: None,
            count: None,
            offset: None,
            origination_account_id: None,
            direction: None,
        }
    }
}

/// The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BankTransferType {
    #[serde(rename = "debit")]
    Debit,
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "null")]
    Null,
}

impl Default for BankTransferType {
    fn default() -> BankTransferType {
        Self::Debit
    }
}
/// Indicates the direction of the transfer: `outbound`: for API-initiated transfers `inbound`: for payments received by the FBO account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "null")]
    Null,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}

