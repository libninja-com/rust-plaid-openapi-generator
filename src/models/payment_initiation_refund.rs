/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PaymentInitiationRefund : PaymentInitiationRefund defines a payment initiation refund



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentInitiationRefund {
    /// The ID of the refund. Like all Plaid identifiers, the `refund_id` is case sensitive.
    #[serde(rename = "refund_id")]
    pub refund_id: String,
    #[serde(rename = "amount")]
    pub amount: crate::models::PaymentAmount,
    /// The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
    #[serde(rename = "status")]
    pub status: Status,
    /// The date and time of the last time the `status` was updated, in IS0 8601 format
    #[serde(rename = "last_status_update")]
    pub last_status_update: String,
}

impl PaymentInitiationRefund {
    /// PaymentInitiationRefund defines a payment initiation refund
    pub fn new(refund_id: String, amount: crate::models::PaymentAmount, status: Status, last_status_update: String) -> PaymentInitiationRefund {
        PaymentInitiationRefund {
            refund_id,
            amount,
            status,
            last_status_update,
        }
    }
}

/// The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PROCESSING")]
    PROCESSING,
    #[serde(rename = "INITIATED")]
    INITIATED,
    #[serde(rename = "EXECUTED")]
    EXECUTED,
    #[serde(rename = "FAILED")]
    FAILED,
}

impl Default for Status {
    fn default() -> Status {
        Self::PROCESSING
    }
}

