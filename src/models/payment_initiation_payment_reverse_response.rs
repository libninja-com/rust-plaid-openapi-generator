/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PaymentInitiationPaymentReverseResponse : PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse`



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentInitiationPaymentReverseResponse {
    /// A unique ID identifying the refund
    #[serde(rename = "refund_id")]
    pub refund_id: String,
    /// The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
    #[serde(rename = "status")]
    pub status: Status,
    /// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    #[serde(rename = "request_id")]
    pub request_id: String,
}

impl PaymentInitiationPaymentReverseResponse {
    /// PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse`
    pub fn new(refund_id: String, status: Status, request_id: String) -> PaymentInitiationPaymentReverseResponse {
        PaymentInitiationPaymentReverseResponse {
            refund_id,
            status,
            request_id,
        }
    }
}

/// The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PROCESSING")]
    PROCESSING,
    #[serde(rename = "EXECUTED")]
    EXECUTED,
    #[serde(rename = "INITIATED")]
    INITIATED,
    #[serde(rename = "FAILED")]
    FAILED,
}

impl Default for Status {
    fn default() -> Status {
        Self::PROCESSING
    }
}

