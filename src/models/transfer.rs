/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Transfer : Represents a transfer within the Transfers API.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Transfer {
    /// Plaid’s unique identifier for a transfer.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "ach_class")]
    pub ach_class: crate::models::AchClass,
    /// The account ID that should be credited/debited for this transfer.
    #[serde(rename = "account_id")]
    pub account_id: String,
    #[serde(rename = "type")]
    pub _type: crate::models::TransferType,
    #[serde(rename = "user")]
    pub user: crate::models::TransferUserInResponse,
    /// The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
    #[serde(rename = "amount")]
    pub amount: String,
    /// The description of the transfer.
    #[serde(rename = "description")]
    pub description: String,
    /// The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "status")]
    pub status: crate::models::TransferStatus,
    #[serde(rename = "sweep_status", skip_serializing_if = "Option::is_none")]
    pub sweep_status: Option<crate::models::TransferSweepStatus>,
    #[serde(rename = "network")]
    pub network: crate::models::TransferNetwork,
    /// When `true`, you can still cancel this transfer.
    #[serde(rename = "cancellable")]
    pub cancellable: bool,
    #[serde(rename = "failure_reason")]
    pub failure_reason: Option<crate::models::TransferFailure>,
    /// The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters 
    #[serde(rename = "metadata")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    /// Plaid’s unique identifier for the origination account that was used for this transfer.
    #[serde(rename = "origination_account_id")]
    pub origination_account_id: String,
    #[serde(rename = "guarantee_decision")]
    pub guarantee_decision: Option<crate::models::TransferAuthorizationGuaranteeDecision>,
    #[serde(rename = "guarantee_decision_rationale")]
    pub guarantee_decision_rationale: Option<crate::models::TransferAuthorizationGuaranteeDecisionRationale>,
    /// The currency of the transfer amount, e.g. \"USD\"
    #[serde(rename = "iso_currency_code")]
    pub iso_currency_code: String,
}

impl Transfer {
    /// Represents a transfer within the Transfers API.
    pub fn new(id: String, ach_class: crate::models::AchClass, account_id: String, _type: crate::models::TransferType, user: crate::models::TransferUserInResponse, amount: String, description: String, created: String, status: crate::models::TransferStatus, network: crate::models::TransferNetwork, cancellable: bool, failure_reason: Option<crate::models::TransferFailure>, metadata: Option<::std::collections::HashMap<String, String>>, origination_account_id: String, guarantee_decision: Option<crate::models::TransferAuthorizationGuaranteeDecision>, guarantee_decision_rationale: Option<crate::models::TransferAuthorizationGuaranteeDecisionRationale>, iso_currency_code: String) -> Transfer {
        Transfer {
            id,
            ach_class,
            account_id,
            _type,
            user,
            amount,
            description,
            created,
            status,
            sweep_status: None,
            network,
            cancellable,
            failure_reason,
            metadata,
            origination_account_id,
            guarantee_decision,
            guarantee_decision_rationale,
            iso_currency_code,
        }
    }
}


