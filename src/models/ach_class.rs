/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AchClass : Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\"arc\"` - Accounts Receivable Entry  `\"cbr`\" - Cross Border Entry  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"cie\"` - Customer Initiated Entry  `\"cor\"` - Automated Notification of Change  `\"ctx\"` - Corporate Trade Exchange  `\"iat\"` - International  `\"mte\"` - Machine Transfer Entry  `\"pbr\"` - Cross Border Entry  `\"pop\"` - Point-of-Purchase Entry  `\"pos\"` - Point-of-Sale Entry  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"rck\"` - Re-presented Check Entry  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet

/// Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\"arc\"` - Accounts Receivable Entry  `\"cbr`\" - Cross Border Entry  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"cie\"` - Customer Initiated Entry  `\"cor\"` - Automated Notification of Change  `\"ctx\"` - Corporate Trade Exchange  `\"iat\"` - International  `\"mte\"` - Machine Transfer Entry  `\"pbr\"` - Cross Border Entry  `\"pop\"` - Point-of-Purchase Entry  `\"pos\"` - Point-of-Sale Entry  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"rck\"` - Re-presented Check Entry  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AchClass {
    #[serde(rename = "arc")]
    Arc,
    #[serde(rename = "cbr")]
    Cbr,
    #[serde(rename = "ccd")]
    Ccd,
    #[serde(rename = "cie")]
    Cie,
    #[serde(rename = "cor")]
    Cor,
    #[serde(rename = "ctx")]
    Ctx,
    #[serde(rename = "iat")]
    Iat,
    #[serde(rename = "mte")]
    Mte,
    #[serde(rename = "pbr")]
    Pbr,
    #[serde(rename = "pop")]
    Pop,
    #[serde(rename = "pos")]
    Pos,
    #[serde(rename = "ppd")]
    Ppd,
    #[serde(rename = "rck")]
    Rck,
    #[serde(rename = "tel")]
    Tel,
    #[serde(rename = "web")]
    Web,

}

impl ToString for AchClass {
    fn to_string(&self) -> String {
        match self {
            Self::Arc => String::from("arc"),
            Self::Cbr => String::from("cbr"),
            Self::Ccd => String::from("ccd"),
            Self::Cie => String::from("cie"),
            Self::Cor => String::from("cor"),
            Self::Ctx => String::from("ctx"),
            Self::Iat => String::from("iat"),
            Self::Mte => String::from("mte"),
            Self::Pbr => String::from("pbr"),
            Self::Pop => String::from("pop"),
            Self::Pos => String::from("pos"),
            Self::Ppd => String::from("ppd"),
            Self::Rck => String::from("rck"),
            Self::Tel => String::from("tel"),
            Self::Web => String::from("web"),
        }
    }
}

impl Default for AchClass {
    fn default() -> AchClass {
        Self::Arc
    }
}




