/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ProductStatusBreakdown : A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProductStatusBreakdown {
    /// The percentage of login attempts that are successful, expressed as a decimal.
    #[serde(rename = "success")]
    pub success: f32,
    /// The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. 
    #[serde(rename = "error_plaid")]
    pub error_plaid: f32,
    /// The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
    #[serde(rename = "error_institution")]
    pub error_institution: f32,
    /// The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
    #[serde(rename = "refresh_interval", skip_serializing_if = "Option::is_none")]
    pub refresh_interval: Option<RefreshInterval>,
}

impl ProductStatusBreakdown {
    /// A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1.
    pub fn new(success: f32, error_plaid: f32, error_institution: f32) -> ProductStatusBreakdown {
        ProductStatusBreakdown {
            success,
            error_plaid,
            error_institution,
            refresh_interval: None,
        }
    }
}

/// The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RefreshInterval {
    #[serde(rename = "NORMAL")]
    NORMAL,
    #[serde(rename = "DELAYED")]
    DELAYED,
    #[serde(rename = "STOPPED")]
    STOPPED,
}

impl Default for RefreshInterval {
    fn default() -> RefreshInterval {
        Self::NORMAL
    }
}

