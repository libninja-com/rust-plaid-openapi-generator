/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Item : Metadata about the Item.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Item {
    /// The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
    #[serde(rename = "institution_id", skip_serializing_if = "Option::is_none")]
    pub institution_id: Option<String>,
    /// The URL registered to receive webhooks for the Item.
    #[serde(rename = "webhook")]
    pub webhook: Option<String>,
    #[serde(rename = "error")]
    pub error: Option<crate::models::Error>,
    /// A list of products available for the Item that have not yet been accessed.
    #[serde(rename = "available_products")]
    pub available_products: Vec<crate::models::Products>,
    /// A list of products that have been billed for the Item. Note - `billed_products` is populated in all environments but only requests in Production are billed. 
    #[serde(rename = "billed_products")]
    pub billed_products: Vec<crate::models::Products>,
    /// A list of authorized products for the Item. 
    #[serde(rename = "products", skip_serializing_if = "Option::is_none")]
    pub products: Option<Vec<crate::models::Products>>,
    /// The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. 
    #[serde(rename = "consent_expiration_time")]
    pub consent_expiration_time: Option<String>,
    /// Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
    #[serde(rename = "update_type")]
    pub update_type: UpdateType,
}

impl Item {
    /// Metadata about the Item.
    pub fn new(item_id: String, webhook: Option<String>, error: Option<crate::models::Error>, available_products: Vec<crate::models::Products>, billed_products: Vec<crate::models::Products>, consent_expiration_time: Option<String>, update_type: UpdateType) -> Item {
        Item {
            item_id,
            institution_id: None,
            webhook,
            error,
            available_products,
            billed_products,
            products: None,
            consent_expiration_time,
            update_type,
        }
    }
}

/// Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UpdateType {
    #[serde(rename = "background")]
    Background,
    #[serde(rename = "user_present_required")]
    UserPresentRequired,
}

impl Default for UpdateType {
    fn default() -> UpdateType {
        Self::Background
    }
}

