/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SandboxTransferSimulateRequest : Defines the request schema for `/sandbox/transfer/simulate`



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SandboxTransferSimulateRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Plaidâ€™s unique identifier for a transfer.
    #[serde(rename = "transfer_id")]
    pub transfer_id: String,
    /// The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:  `pending` --> `failed`  `pending` --> `posted`  `posted` --> `reversed` 
    #[serde(rename = "event_type")]
    pub event_type: String,
    #[serde(rename = "failure_reason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<crate::models::TransferFailure>,
}

impl SandboxTransferSimulateRequest {
    /// Defines the request schema for `/sandbox/transfer/simulate`
    pub fn new(transfer_id: String, event_type: String) -> SandboxTransferSimulateRequest {
        SandboxTransferSimulateRequest {
            client_id: None,
            secret: None,
            transfer_id,
            event_type,
            failure_reason: None,
        }
    }
}


